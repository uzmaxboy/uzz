const ADMINS = [123456789, 987654321] // ID –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞
const DB_URL = 'mongodb://localhost:27017/bogatiry' // URL –±–∞–∑—ã –±–æ—Ç–∞
const QIWI_TOKEN = "dfgfdgfdgdfgdfhfghfghfg344bb" // API –∫–ª—é—á QIWI –∫–æ—à–µ–ª—å–∫–∞ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
const BOT_TOKEN = "1096541213:AAFWc1qw5beCJ0e8RXGe7r7HVekQzlAV9TU" // Bot API Token

/*

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: @Inffix

*/

var txnId = require('./txnId');

process.env.TZ = 'Moscow/Europe';
let trees = [
	{
		id: 1,
		name: "üêØ –≠–ª–µ—Å–µ–π –°–∏–ª–æ–≤–∏—á",
		earn: 95,
		price: 25
	},
	{
		id: 2,
		name: "üêØ –°–æ–ª–æ–≤–µ–π –†–∞–∑–±–æ–π–Ω–∏–∫",
		earn: 209,
		price: 250
	},
	{
		id: 3,
		name: "üêØ –ê–ª—ë—à–∞ –ü–æ–ø–æ–≤–∏—á",
		earn: 422,
		price: 500
	},
	{
		id: 4,
		name: "üêØ –î–æ–±—Ä–∏–Ω—è –ù–∏–∫–∏—Ç–∏—á",
		earn: 903,
		price: 1000
	},
	{
		id: 5,
		name: "üêØ –ò–ª—å—è –ú—É—Ä–æ–º–µ—Ü",
		earn: 2090,
		price: 2500
	},
];

const mongo = require('mongoose');
mongo.connect(DB_URL);

var User = mongo.model('User', {
	id: Number,
	buybalance: Number,
	outbalance: Number,
	name: String,
	bhivebalance: Number,
	fc: Number,
	ref: Number,
	regDate: String,
	trees: Array,
	deposit: Number,
	payout: Number,
	fetuses: Number,
	menu: String,
	lastCollect: Number,
	ban: Boolean,
	refCount: Number,
	wb_profits: Number,
	not: Boolean
});

var wbProfits = [0, 33, 340, 618, 982, 2200, 4978, 7470, 23027]
var wbPrices = [0, 0, 120, 400, 500, 2000, 3000, 4000, 7000]

var Task = mongo.model('Task', {
	id: Number
});

const Ticket = mongo.model('Ticket', {
	id: Number,
	amount: Number,
	wallet: Number
})

const BeeMother = mongo.model("BeeMothr", {
	creator_id: Number,
	end_time: Number,
	beesGet: Number,
	nextBeeGet: Number
})

const WildBee = mongo.model("WildBee", {
	creator_id: Number,
	start_time: Number,
	level: Number,
	bee_profit: Number,
})

const Start = [
	["‚öîÔ∏è –ö–∞–∑–∞—Ä–º–∞", "‚ö∞Ô∏è –ö–ª–∞–¥–±–∏—â–µ"],
	["üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã"],
	["üì¢ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è–º", "üìö –û –±–æ—Ç–µ"]
];

const Cancel = [
	["üö´ –û—Ç–º–µ–Ω–∞"]
];

const AdminPanel = [
	["üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üìÆ –í—ã–ø–ª–∞—Ç—ã"],
	["üìß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
	["üîô –ù–∞–∑–∞–¥"]
];

const RM_admin = {
	inline_keyboard: [
		[{ text: "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data: "admin_mm" }],
		[{ text: "üîé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data: "admin_u" }],
		[{ text: "üìÆ –í—ã–ø–ª–∞—Ç—ã", callback_data: "admin_w" }],
		[{ text: "‚úèÔ∏è –ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é", callback_data: "admin_b" }],
		[{ text: "‚öúÔ∏è –†–∞—Ç—É—à–∞", callback_data: "admin_bm" }],
		[{ text: "üïí –¢–æ–ø –∑–∞ 24 —á–∞—Å–∞", callback_data: "admin_top" }],
	]
}

const RM_admin_return = { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],] }

const RM_mm1 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚è∏ –ü–∞—É–∑–∞", callback_data: "admin_mm_pause" }],
	]
}

const RM_mm2 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "admin_mm_play" }],
	]
}



const { Qiwi } = require('node-qiwi-api');
const qiwi = new Qiwi(QIWI_TOKEN);

const Telegram = require('node-telegram-bot-api');
const bot = new Telegram(BOT_TOKEN, { polling: true });

bot.getMe().then(r => console.log(r))

bot.on('text', async (message) => {
	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	let $menu = [];
	var uid = message.from.id
	var text = message.text
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + text)

	Start.map((x) => $menu.push(x));
	if (ADMINS.find((x) => x == message.from.id)) $menu.push(["üîù –ê–¥–º–∏–Ω–∫–∞"]);

	if (message.text) {
		if (message.text.startsWith('/start') || message.text == 'üîô –ù–∞–∑–∞–¥') {
			let $user = await User.findOne({ id: message.from.id });
			if (!$user) {
				let schema = {
					id: message.from.id,
					buybalance: 0,
					outbalance: 0,
					bhivebalance: 0,
					wb_profits: 0,
					name: message.from.first_name,
					fc: 0,
					ref: 0,
					regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`,
					trees: [],
					deposit: 0,
					payout: 0,
					fetuses: 0,
					menu: "",
					lastCollect: Date.now(),
					ban: false,
					refCount: 0,
					not: false
				}

				let reffer = Number(message.text.split('/start ')[1]);

				if (reffer) {
					let $reffer = await User.findOne({ id: reffer });
					if ($reffer) {
						schema.ref = $reffer.id;
						await $reffer.inc('buybalance', 0.25);
						await $reffer.inc('refCount', 1);
						bot.sendMessage($reffer.id, `üîî –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id=${message.from.id}">–ø–∞—Ä—Ç–Ω—ë—Ä–∞</a> –∏ –ø–æ–ª—É—á–∏–ª–∏ 0.25‚ÇΩ`, { parse_mode: "HTML" });
					}
				}

				let user = new User(schema);
				await user.save();
			}

			return message.send(`
‚úåÔ∏è <b>–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}</b>
üìù <b>–¶–µ–ª—å –∏–≥—Ä—ã:</b>
‚îú‚îÄ–ü–æ–ø–æ–ª–Ω—è–µ–º —Å—á–µ—Ç ü§ò
‚îú‚îÄ–ü–æ–∫—É–ø–∞–µ–º –±–æ–≥–∞—Ç—ã—Ä–µ–π ‚öîÔ∏è
‚îú‚îÄ–°–æ–±–∏—Ä–∞–µ–º –¥–æ—Ö–æ–¥ üí∏
‚îú‚îÄ–û–±–º–µ–Ω–∏–≤–∞–µ–º –¥–æ—Ö–æ–¥ üíµ
‚îî‚îÄ–ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å–≥–∏ üíπ
‚ùì –ß–µ–º –º—ã –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º?
‚ùóÔ∏è –° –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–∞, —Å –ø—Ä–æ–¥–∞–∂–∏ —Ä–µ–∫–ª–∞–º—ã,—Å –µ–Ω–∞—à–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ @TGZEMO_BOT
üèù <b>–ß–∞—Ç</b> üëâ @Bogatiry_chat
üí≥ <b>–í—ã–ø–ª–∞—Ç—ã</b> üëâ @Bogatiry_viplatu
üì¢ <b>–ù–æ–≤–æ—Å—Ç–∏</b> üëâ @Bogatiry_news`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	message.user = await User.findOne({ id: message.from.id });
	if (!message.user) return message.send(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞–ø–∏—à–∏—Ç–µ /start`);
	if (message.user.ban) return
	if (!message.user.name || message.user.name != message.from.first_name)
		await User.findOneAndUpdate({ id: message.from.id }, { name: message.from.first_name })

	if (state[uid] == 7770 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined
		bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
			if (text.split("#").length == 4) {
				var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				text = text.split("#")[0]
				mm_t(text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)
			}
			else mm_t(text, e.message_id, e.chat.id, false, false, false, 100)
		})
	}

	if (state[uid] == 77771 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
		bm.count = Number(text)
		bm.bought = 0
		bm.status = true
		await User.findOneAndUpdate({ id: 1 }, { menu: JSON.stringify(bm) })
		return message.send(`${text} —Ä–∞—Ç—É—à –≤—ã–ø—É—â–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ü–µ–Ω–µ ${bm.price}!`, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] } });
	}
	if (state[uid] == 77772 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
		bm.price = Number(text)
		await User.findOneAndUpdate({ id: 1 }, { menu: JSON.stringify(bm) })
		return message.send(`–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Ç—É—à–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ ${bm.price} WAVES!`, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] } });
	}
	if (state[uid] == 77773 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
		bm.count = Number(text)
		await User.findOneAndUpdate({ id: 1 }, { menu: JSON.stringify(bm) })
		return message.send(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Ç—É—à —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ ${bm.count} —à—Ç—É–∫!`, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] } });
	}

	if (state[uid] == 7771 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		text = Number(text.replace("%", ""))
		await User.findOneAndUpdate({ id: 0 }, { deposit: text })
		return message.send(`–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –≤ ${text}% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`, { reply_markup: RM_admin_return });
	}

	if (state[uid] == 7772 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined

		message.text = Number(message.text);
		let user = await User.findOne({ id: message.text });
		let u = user
		if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

		let partners = await User.find({ ref: message.text });
		await message.user.set('menu', '');
		var kb = { inline_keyboard: [] }
		if (u.ban) kb.inline_keyboard.push([{ text: "‚ôªÔ∏è –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data: "unban_" + u.id }])
		else kb.inline_keyboard.push([{ text: "üõë –ó–∞–±–∞–Ω–∏—Ç—å", callback_data: "ban_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data: "addBuyBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data: "editBuyBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "addOutBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "editOutBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å WAVES", callback_data: "addBHIVEBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å WAVES", callback_data: "editBHIVEBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data: "addPayIns_" + u.id }, { text: "‚úèÔ∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data: "editPayIns_" + u.id }])

		kb.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }])

		return message.send(`üìù –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <b>${partners.length}</b>

üÜî ID: <code>${user.id}</code>

üí∞ –ë–∞–ª–∞–Ω—Å:
üõí –î–ª—è –ø–æ–∫—É–ø–æ–∫: ${user.buybalance.toFixed(2)}‚ÇΩ
üì≠ –î–ª—è –≤—ã–≤–æ–¥–∞: ${user.outbalance.toFixed(2)}‚ÇΩ
üí∞ BHIVE: ${user.bhivebalance.toFixed(2)}

üêØ –ë–æ–≥–∞—Ç—ã—Ä–µ–π –≤ –∫–∞–∑–∞—Ä–º–µ: <b>${user.trees.length}</b>

<b>–ü–æ–ø–æ–ª–Ω–∏–ª: ${roundPlus(user.deposit)}‚ÇΩ</b>
<b>–í—ã–≤–µ–ª: ${roundPlus(user.payout)}‚ÇΩ</b>
`, {
			parse_mode: "HTML",
			reply_markup: kb
		});

	}

	if (state[uid] == 7773 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { buybalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7774 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { outbalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77745 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { bhivebalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã WAVES –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`WAVES –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text} WAVES!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 777455 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { deposit: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7775 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { buybalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7776 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { outbalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 77765 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { bhivebalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã WAVES –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`WAVES –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text} WAVES!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 777655 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { deposit: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à —Å—É–º–º–∞ –í–∞—à–∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏–∑–º–µ–Ω–∞ –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}

	if (message.text) {
		if (message.text == 'üö´ –û—Ç–º–µ–Ω–∞') {
			await message.user.set('menu', '');
			return message.send('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu == 'reinvest') {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');

		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		else if (message.text <= message.user.outbalance) {
			await message.user.set('menu', '');

			await message.user.dec('outbalance', message.text);
			await message.user.inc('buybalance', message.text);

			return message.send(`–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ ${message.text.toFixed(2)}‚ÇΩ`, {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu.startsWith('amountQiwi')) {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');

		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text < 30) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª–µ–µ 30 —Ä—É–±–ª–µ–π!');

		if (message.text <= message.user.outbalance) {
			await message.user.dec('outbalance', message.text);

			let ticket = new Ticket({
				id: message.from.id,
				amount: message.text,
				wallet: Number(message.user.menu.split('amountQiwi')[1])
			});

			await ticket.save();
			await message.user.set('menu', '');

			return message.send('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu == 'qiwi') {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});

		if (message.text < 70000000000) return message.send('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});

		await message.user.set('menu', 'amountQiwi' + message.text);
		return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.outbalance.toFixed(2)}‚ÇΩ`);
	}

	if (message.text) {
		if (message.text == '‚öîÔ∏è –ö–∞–∑–∞—Ä–º–∞') {
			return message.send('–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –∑–∞–π—Ç–∏.', {
				reply_markup: {
					inline_keyboard: [
						[{ text: "üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data: "store" }],
						[{ text: "‚öîÔ∏è –ú–æ—è –∫–∞–∑–∞—Ä–º–∞", callback_data: "trees:inv1" }],
					]
				}
			});
		}

		if (message.text == '‚ö∞Ô∏è –ö–ª–∞–¥–±–∏—â–µ') {
			return bot.sendPhoto(message.chat.id, "/home/bot/paid/Bogatiry/pic2.png", {
				caption: `–ù–∞ –∫–ª–∞–¥–±–∏—â–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å <b>‚öîÔ∏è —É–±–∏–π—Å—Ç–≤–∞</b> –Ω–∞ <b>‚ÇΩ —Ä—É–±–ª–∏</b>

1000 ‚öîÔ∏è —É–±–∏–π—Å—Ç–≤ = 1 —Ä—É–±–ª—å
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 1000 —É–±–∏–π—Å—Ç–≤
					
‚öîÔ∏è <b>–í–∞—à–∏ —É–±–∏–π—Å—Ç–≤–∞:</b> ${message.user.fetuses.toFixed(2)}
					
–ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ 50% –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 50% –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞`, parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üîÑ –û–±–º–µ–Ω—è—Ç—å", callback_data: "exchange" }]
					]
				}
			})

		}

		if (message.text == 'üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç') {
			return message.send(`üìù –ò–º—è: <b>${message.from.first_name.replace(/(\<|\>)/g, '')}</b>

üÜî <b>ID:</b> <code>${message.from.id}</code>

üõí <b>–ù–∞ –ø–æ–∫—É–ø–∫–∏:</b> ${message.user.buybalance.toFixed(2)}‚ÇΩ
üì≠ <b>–ù–∞ –≤—ã–≤–æ–¥:</b> ${message.user.outbalance.toFixed(2)}‚ÇΩ
üí∞ <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</b> ${message.user.bhivebalance.toFixed(2)} WAVES

üêØ <b>–ë–æ–≥–∞—Ç—ã—Ä–µ–π –≤ –∫–∞–∑–∞—Ä–º–µ:</b> ${message.user.trees.length}

üí∏ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> ${message.user.deposit.toFixed(2)}‚ÇΩ
ü§ë <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> ${message.user.payout.toFixed(2)}‚ÇΩ`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data: "deposit" }, { text: "üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data: "withdraw" }],
						[{ text: "‚ôªÔ∏è –†–µ–∏–Ω–≤–µ—Å—Ç", callback_data: "reinvest" }, { text: "üêØ –ú–æ—è –∫–∞–∑–∞—Ä–º–∞", callback_data: "trees:totalMy" }],
					]
				}
			});
		}

		if (message.text == 'üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã') {
			return message.send(`<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>
üîë –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:
‚ñ´Ô∏è 0.25 üí∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
‚ñ´Ô∏è 10% —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤:
	–ü–æ 5% –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
		   
üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: https://t.me/bogatiry_investbot?start=${message.from.id}
		   
üéä –í—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: ${await User.countDocuments({ ref: message.from.id })}
		`, {
				parse_mode: "HTML"
			})
		}

		if (message.text == 'üì¢ –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è–º') {
			return message.send(`üì¢ <b>–ù–∞—à –ø—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç –∫ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º:</b>\n\n<b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n‚ñ´Ô∏è @romkej\n‚ñ´Ô∏è @romkej_bot`, { parse_mode: "HTML", });
		}

		if (message.text == 'üìö –û –±–æ—Ç–µ') {

			var s = await User.findOne({ id: 0 })
			let stats = {
				users: await User.countDocuments(),
				users_today: await User.find({ regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}` }),
				cmds: message.message_id
			}

			stats.users_today = stats.users_today.length;

			return message.send(`
üìä<b> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n
üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ: ${stats.users}
üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: ${stats.users_today}
üì• –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: ${Math.round(s.ref)}‚ÇΩ
üì§ –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: ${Math.round(s.fc)}‚ÇΩ
üïê –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω 20.11.2019
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url: "https://t.me/romkej" }],
						[{ text: "üí¨ –ß–∞—Ç", url: "https://t.me/Bogatiry_chat" }],
						[{ text: "‚ôªÔ∏è –ü–æ–ø–æ–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥—ã", url: "https://t.me/bogatiry_viplatu" }],
						[{ text: "‚öîÔ∏è –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞", url: "https://t.me/Bogatiry_news" }],
						[{ text: "ü•á –¢–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤", callback_data: "topInv" }, { text: "üèÜ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", callback_data: "topRef" }],
					]
				}
			});
		}
	}

	if (ADMINS.indexOf(message.from.id) !== -1) {
		if (message.text == 'üîù –ê–¥–º–∏–Ω–∫–∞') {
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			var b = (await User.findOne({ id: 0 })).deposit
			return qiwi.getBalance(async (err, balance) => {
				bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + "‚ÇΩ\n<b>–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:</b> " + b + "%", { parse_mode: "HTML", reply_markup: RM_admin })
			})
		}

		if (message.text.startsWith('/setbuybalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('buybalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}

		if (message.text.startsWith('/setoutbalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('outbalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}

	}
});

bot.on('callback_query', async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });
	var uid = message.chat.id
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–±—ç–∫: " + query.data)

	if (!message.user) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

	if (query.data == 'none') return bot.answerCallbackQuery(query.id, '–ü—Ä–∏–≤–µ—Ç! :)', true);

	if (query.data.startsWith('trees:shop')) {
		let id = Number(query.data.split('trees:shop')[1]);
		var maxId = 0
		message.user.trees.map((t) => { if (t.id > maxId) maxId = t.id })
		let tree = trees.find((x) => x.id == id);

		var treesWithEqualId = 0
		message.user.trees.map((t) => { if (t.id == id) treesWithEqualId++ })

		if (id <= maxId + 1) {
			if (treesWithEqualId < 5)
				var bbtn = [{ text: `‚ûï –ö—É–ø–∏—Ç—å –∑–∞ ${tree.price}‚ÇΩ`, callback_data: `trees:buy${tree.id}` }]
			else var bbtn = [{ text: `üõë –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 5 –±–æ–≥–∞—Ç—ã—Ä–µ–π`, callback_data: getNavigationQuery(id + 1, tree.id) }]

		}
		else
			var bbtn = [{ text: `‚óÄÔ∏è –°–ø–µ—Ä–≤–∞ –∫—É–ø–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–æ–≥–∞—Ç—ã—Ä—è`, callback_data: getNavigationQuery(id - 1, tree.id) }]

		if (!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		bot.deleteMessage(message.chat.id, message.message_id)
		bot.sendPhoto(message.chat.id, `/home/bot/paid/Bogatiry/c${tree.id}.png`, {
			caption: `<b>${tree.name}</b>
		
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${tree.price}‚ÇΩ
‚öîÔ∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${tree.earn}`, parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [[
					{ text: getInventoryIcon(1, tree.id), callback_data: getNavigationQuery(1, tree.id) },
					{ text: getInventoryIcon(2, tree.id), callback_data: getNavigationQuery(2, tree.id) },
					{ text: getInventoryIcon(3, tree.id), callback_data: getNavigationQuery(3, tree.id) },
					{ text: getInventoryIcon(4, tree.id), callback_data: getNavigationQuery(4, tree.id) },
					{ text: getInventoryIcon(5, tree.id), callback_data: getNavigationQuery(5, tree.id) },
				], bbtn
				]
			}
		})
	}

	if (query.data.startsWith('topInv')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ deposit: -1 }).limit(20)
		var c = 0
		return bot.sendMessage(uid, `<b>ü•á –¢–æ–ø 20 –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.deposit}‚ÇΩ</b>` }).join("\n")}`, { parse_mode: "html" });
	}

	if (query.data.startsWith('topRef')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ refCount: -1 }).limit(20)
		var c = 0
		return bot.sendMessage(uid, `<b>üèÜ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.refCount}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤` }).join("\n")}`, { parse_mode: "html" });
	}

	if (query.data.startsWith('store')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		return bot.sendMessage(uid, '–ú–∞–≥–∞–∑–∏–Ω:', {
			reply_markup: {
				inline_keyboard: [
					[{ text: "üêØ –ë–æ–≥–∞—Ç—ã—Ä–∏", callback_data: "trees:shop1" }],
					[{ text: "üê≤ –ß–µ–º–ø–∏–æ–Ω—ã", callback_data: "wildBees" }],
					[{ text: "‚öúÔ∏è –†–∞—Ç—É—à–∞", callback_data: "beeMother" }],
				]
			}
		});

	}

	if (query.data.startsWith('wildBees')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var reply_markup = { inline_keyboard: [] }
		var wb = await WildBee.find({ creator_id: uid })
		wb.map((b) => { reply_markup.inline_keyboard.push([{ text: `üê≤ –ß–µ–º–ø–∏–æ–Ω ${b.level} —É—Ä–æ–≤–Ω—è`, callback_data: "wb_" + b._id }]) })
		reply_markup.inline_keyboard.push([{ text: `‚ûï –°–æ–±—Ä–∞—Ç—å ${message.user.wb_profits} ‚öîÔ∏è`, callback_data: "wbCollect" }])
		reply_markup.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "store" }])
		return bot.sendMessage(uid, `üê≤ –ß–µ–º–ø–∏–æ–Ω—ã –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä–∞—Ç—É—à–µ\n
<b>–î–ª—è —á–µ–º–ø–∏–æ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ 5 —É—Ä–æ–≤–Ω–µ–π —É–ª—É—á—à–µ–Ω–∏—è:</b>\n
–£—Ä–æ–≤–µ–Ω—å | –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å | –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
1 —É—Ä–æ–≤–µ–Ω—å - 33 ‚öîÔ∏è 
2 —É—Ä–æ–≤–µ–Ω—å - 340 ‚öîÔ∏è - 120‚ÇΩ
3 —É—Ä–æ–≤–µ–Ω—å - 618 ‚öîÔ∏è - 400‚ÇΩ
4 —É—Ä–æ–≤–µ–Ω—å - 982 ‚öîÔ∏è - 500‚ÇΩ
5 —É—Ä–æ–≤–µ–Ω—å - 2200 ‚öîÔ∏è - 2000‚ÇΩ
<b>–í–∞—à–∏ —á–µ–º–ø–∏–æ–Ω—ã:</b>`, {
			reply_markup, parse_mode: "html"
		});
	}

	if (query.data.startsWith('wbCollect')) {
		if (message.user.wb_profits == 0)
			return bot.answerCallbackQuery(query.id, 'üê≤ –í–∞—à–∏ —á–µ–º–ø–∏–æ–Ω—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω–µ—Å–ª–∏ –¥–æ—Ö–æ–¥–∞!', true);
		else {
			bot.deleteMessage(message.chat.id, message.message_id)
			await User.findOneAndUpdate({ id: uid }, { wb_profits: 0 })
			await message.user.inc('fetuses', message.user.wb_profits)
			return bot.answerCallbackQuery(query.id, `üê≤ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ ${message.user.wb_profits} ‚öîÔ∏è`, true);
		}
	}

	if (query.data.startsWith('wbUpLevel_')) {
		var wb = await WildBee.findOne({ _id: query.data.split("_")[1] })
		var price = wbPrices[wb.level + 1]
		if (message.user.buybalance < price) return bot.answerCallbackQuery(query.id, `‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è`, true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -price } })
		await WildBee.findOneAndUpdate({ _id: String(wb._id) }, { level: wb.level + 1 })
		bot.deleteMessage(message.chat.id, message.message_id)
		wb.level++
		var reply_markup = { inline_keyboard: [] }
		if (wb.level != 8)
			reply_markup.inline_keyboard.push([{ text: `üîº –ö—É–ø–∏—Ç—å ${wb.level + 1} —É—Ä–æ–≤–µ–Ω—å –∑–∞ ${wbPrices[wb.level + 1]}‚ÇΩ`, callback_data: `wbUpLevel_` + wb._id }])
		reply_markup.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "wildBees" }])
		bot.sendPhoto(message.chat.id, "/home/bot/paid/MonetaFruit/pic3.png", {
			caption: `
üê≤ <b>–ß–µ–º–ø–∏–æ–Ω ${wb.level} —É—Ä–æ–≤–Ω—è</b> \n
üïí <b>–í –∫–∞–∑–∞—Ä–º–µ:</b> ${Math.floor((Date.now() - wb.start_time) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π
‚öîÔ∏è <b>–£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å:</b> ${wbProfits[wb.level]}
üí∞ <b>–ü—Ä–∏–Ω—ë—Å —É–±–∏–π—Å—Ç–≤</b>: ${ wb.bee_profit}`, parse_mode: "HTML", reply_markup
		})
		return bot.answerCallbackQuery(query.id, `üîº –£—Ä–æ–≤–µ–Ω—å —á–µ–º–ø–∏–æ–Ω–∞ –ø–æ–≤—ã—à–µ–Ω –¥–æ ${wb.level} –∑–∞ ${price}‚ÇΩ`, true);

	}

	if (query.data.startsWith('wb')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var wb = await WildBee.findOne({ _id: query.data.split("_")[1] })
		var reply_markup = { inline_keyboard: [] }
		if (wb.level != 4)
			reply_markup.inline_keyboard.push([{ text: `üîº –ö—É–ø–∏—Ç—å ${wb.level + 1} —É—Ä–æ–≤–µ–Ω—å –∑–∞ ${wbPrices[wb.level + 1]}‚ÇΩ`, callback_data: `wbUpLevel_` + wb._id }])
		reply_markup.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "wildBees" }])
		bot.sendPhoto(message.chat.id, "/home/bot/paid/MonetaFruit/pic3.png", {
			caption: `
üê≤ <b>–ß–µ–º–ø–∏–æ–Ω ${wb.level} —É—Ä–æ–≤–Ω—è</b> \n
üïí <b>–ù–∞ –ø–∞—Å–µ–∫–µ:</b> ${Math.floor((Date.now() - wb.start_time) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π
‚öîÔ∏è <b>–£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å:</b> ${wbProfits[wb.level]}
üí∞ <b>–ü—Ä–∏–Ω–µ—Å–ª–∞ –∫</b>: ${ wb.bee_profit}`, parse_mode: "HTML", reply_markup
		})
	}

	if (query.data == ('beeMother')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		console.log(await User.findOne({ id: 1 }))
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
		var reply_markup = {
			inline_keyboard: [
			]
		}
		var ubm = await BeeMother.findOne({ creator_id: message.user.id })
		if (ubm != null) {
			var now = new Date()
			var ttl = Math.floor((ubm.end_time - now.getTime()) / (1000 * 60 * 60 * 24))
			var str = `<b>‚öúÔ∏è –í–∞—à–∞ —Ä–∞—Ç—É—à–∞:</b>\n
üïê –û—Å—Ç–∞–ª–æ—Å—å <b>${ttl}</b> –¥–Ω–µ–π
üêØ –ü—Ä–∏–Ω–µ—Å–ª–∞ <b>${ubm.beesGet}</b> –∏–∑ <b>4</b> —á–µ–º–ø–∏–æ–Ω–æ–≤
`
		}

		else if (!bm.status) var str = '<b>‚ùå –†–∞—Ç—É—à–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>'
		else {
			var str = `<b>‚úÖ –†–∞—Ç—É—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!</b>\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${bm.price} WAVES</b>\nüõí –ö—É–ø–ª–µ–Ω–æ <b>${bm.bought}</b> –∏–∑ <b>${bm.count}</b>`
			reply_markup.inline_keyboard.push([{ text: "üõí –ö—É–ø–∏—Ç—å —Ä–∞—Ç—É—à—É", callback_data: "beeMotherBuy" }])
		}
		reply_markup.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "store" }])
		return bot.sendMessage(uid, `
<b>‚öúÔ∏è –ü–æ–∫—É–ø–∫–∞ —Ä–∞—Ç—É—à–∏:</b>
‚ùóÔ∏èÔ∏èÔ∏è –†–∞—Ç—É—à–∞ - –º–∞–≥–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Ä–æ–∂–¥–∞—é—Ç—Å—è —á–µ–º–ø–∏–æ–Ω—ã
üí∞ –ï—ë –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –∑–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É:
üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: <b>${message.user.bhivebalance} WAVES</b>
‚öúÔ∏è –†–∞—Ç—É—à–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —É –∏—Å—á–µ–∑–∞–µ—Ç —Å –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ!
‚ö∞Ô∏è –°—Ä–æ–∫ —Ä–∞–±–æ—Ç—ã —Ä–∞—Ç—É—à–∏ - 30 –¥–Ω–µ–π!
üêØ –†–∞—Ç—É—à–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç 4 —á–µ–º–ø–∏–æ–Ω–∞!\n\n${str}`, {
			reply_markup, parse_mode: "html"
		});

	}

	if (query.data == ('beeMotherBuy')) {
		var bm = JSON.parse((await User.findOne({ id: 1 })).menu)

		if (!bm.status) return bot.answerCallbackQuery(query.id, '‚ùå –†–∞—Ç—É—à–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!', true);
		if (message.user.bhivebalance < bm.price) return bot.answerCallbackQuery(query.id, '‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã WAVES!', true);
		bot.deleteMessage(message.chat.id, message.message_id)

		await User.findOneAndUpdate({ id: message.chat.id }, { $inc: { bhivebalance: -bm.price } })
		var now = new Date()
		now.setDate(now.getDate() + 7)
		var nextBeeGet = now.getTime()
		now.setDate(now.getDate() + 24)
		var end_time = now.getTime()
		await BeeMother.insertMany([{ creator_id: message.chat.id, beesGet: 0, nextBeeGet, end_time }])
		bm.bought++
		if (bm.bought >= bm.count) bm.status = false
		await User.findOneAndUpdate({ id: 1 }, { menu: JSON.stringify(bm) })
		return bot.sendMessage(uid, `
<b>‚öúÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ä–∞—Ç—É—à—É!</b>`, {
			reply_markup, parse_mode: "html"
		});

	}

	if (query.data.startsWith('trees:inv')) {
		let id = Number(query.data.split('trees:inv')[1]);

		let tree = trees.find((x) => x.id == id);
		if (!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		let total_balance = 0;

		message.user.trees.map((x) => {
			total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60);
		});

		let count = message.user.trees.filter((x) => x.id == tree.id).length;
		let earn = count * tree.earn;

		bot.deleteMessage(message.chat.id, message.message_id)
		bot.sendPhoto(message.chat.id, `/home/bot/paid/Bogatiry/c${tree.id}.png`, {
			caption: `<b>${tree.name}</b> (${count}x)
		
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${tree.price}‚ÇΩ
‚öîÔ∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${earn}`, parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [[
					{ text: getInventoryIcon(1, tree.id), callback_data: getInventoryQuery(1, tree.id) },
					{ text: getInventoryIcon(2, tree.id), callback_data: getInventoryQuery(2, tree.id) },
					{ text: getInventoryIcon(3, tree.id), callback_data: getInventoryQuery(3, tree.id) },
					{ text: getInventoryIcon(4, tree.id), callback_data: getInventoryQuery(4, tree.id) },
					{ text: getInventoryIcon(5, tree.id), callback_data: getInventoryQuery(5, tree.id) },
				], [{ text: `‚ûï –°–æ–±—Ä–∞—Ç—å ${total_balance.toFixed(2)}‚öîÔ∏è`, callback_data: `trees:collect` }]
				]
			}
		})

	}

	if (query.data.startsWith('trees:buy')) {
		let total_balance = 0;

		message.user.trees.map((x) => {
			if ((((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60) > (trees.find((a) => a.id == x.id).earn * 72)) {
				total_balance += trees.find((a) => a.id == x.id).earn * 72;
			} else {
				total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60);
			}
		});


		let id = Number(query.data.split('trees:buy')[1]);

		let tree = trees.find((x) => x.id == id);
		if (!tree) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

		if (tree.price > message.user.buybalance) return bot.answerCallbackQuery(query.id, 'üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.', true);
		else if (tree.price <= message.user.buybalance) {

			var treesWithEqualId = 0
			message.user.trees.map((t) => { if (t.id == id) treesWithEqualId++ })

			if (treesWithEqualId >= 5)
				return bot.answerCallbackQuery(query.id, `üõë –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 5 –±–æ–≥–∞—Ç—ã—Ä–µ–π –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è`, true);

			//await message.user.dec('buybalance', tree.price);

			await message.user.set('lastCollect', Date.now());
			await message.user.inc('fetuses', Number(total_balance.toFixed(2)));

			await message.user.trees.push({ id: tree.id, date: Date.now(), lastCollect: Date.now() });
			await message.user.save();
			await User.findOneAndUpdate({ id: uid }, { $inc: { buybalance: -tree.price } })


			return bot.answerCallbackQuery(query.id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${tree.name} –∑–∞ ${tree.price}‚ÇΩ`, true);
		}
	}

	if (query.data == 'exchange') {
		if (message.user.fetuses < 1000) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞: 1000 ‚öîÔ∏è', true);
		let { fetuses } = message.user;
		await message.user.set('fetuses', 0);
		fetuses = fetuses / 1000;
		await message.user.inc('buybalance', fetuses / 2);
		await message.user.inc('outbalance', fetuses / 2);
		bot.deleteMessage(message.chat.id, message.message_id);
		return bot.answerCallbackQuery(query.id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ ${(fetuses * 1000).toFixed(2)} ‚öîÔ∏è –Ω–∞ ${fetuses.toFixed(2)}‚ÇΩ`, true);
	}

	if (query.data == 'deposit') {
		bot.deleteMessage(message.chat.id, message.message_id);

		var b = (await User.findOne({ id: 0 })).deposit
		if (b == 0) var bt = ""
		else var bt = `\n<b>üî• –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è: +${b}% –ø—Ä–∏ –ª—é–±–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏</b>`
		return bot.sendMessage(message.chat.id, `ü•ù <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: QIWI</b>

üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ <code>+380633966429</code>
‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π <code>B${message.chat.id}</code>

üì• <b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é WAVES –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b> @romkej
${bt}`, {
			parse_mode: "HTML"
		});
	}

	if (query.data == 'withdraw') {
		if (message.user.outbalance < 30) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 30‚ÇΩ', true);
		bot.deleteMessage(message.chat.id, message.message_id);

		await message.user.set('menu', 'qiwi');
		await bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI –¥–ª—è –≤—ã–≤–æ–¥–∞.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 79001234567', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'reinvest') {
		await message.user.set('menu', 'reinvest');
		return bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'trees:collect') {
		let total_balance = 0;

		message.user.trees.map((x) => {
			total_balance += (((Date.now() - message.user.lastCollect) / 1000) / 60) * (trees.find((a) => a.id == x.id).earn / 60);
		});

		await message.user.set('lastCollect', Date.now());

		await bot.deleteMessage(message.chat.id, message.message_id);
		await message.user.inc('fetuses', Number(total_balance.toFixed(2)));

		return bot.answerCallbackQuery(query.id, `–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ ${total_balance.toFixed(2)} ‚öîÔ∏è`, true);
	}

	if (query.data == 'trees:totalMy') {
		let $trees = [];
		let total_earn = 0;

		message.user.trees.map((x) => {
			$trees.push(x.id);
			total_earn += trees.find((a) => a.id == x.id).earn
		});

		let text = ``;

		if ($trees.filter((x) => x === 1).length) text += `\n\n<b>${trees.find((x) => x.id == 1).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 1).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 1).length * trees.find((x) => x.id == 1).earn}`;
		if ($trees.filter((x) => x === 2).length) text += `\n\n<b>${trees.find((x) => x.id == 2).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 2).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 2).length * trees.find((x) => x.id == 2).earn}`;
		if ($trees.filter((x) => x === 3).length) text += `\n\n<b>${trees.find((x) => x.id == 3).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 3).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 3).length * trees.find((x) => x.id == 3).earn}`;
		if ($trees.filter((x) => x === 4).length) text += `\n\n<b>${trees.find((x) => x.id == 4).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 4).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 4).length * trees.find((x) => x.id == 4).earn}`;
		if ($trees.filter((x) => x === 5).length) text += `\n\n<b>${trees.find((x) => x.id == 5).name}</b>\n\t\t‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${$trees.filter((x) => x === 5).length}\n\t\t‚ñ™Ô∏è –£–±–∏–π—Å—Ç–≤ –≤ —á–∞—Å: ${$trees.filter((x) => x === 5).length * trees.find((x) => x.id == 5).earn}`;

		return bot.editMessageText(`üìÑ –°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –±–æ–≥–∞—Ç—ã—Ä–µ–π –≤ –∫–∞–∑–∞—Ä–º–µ: ‚§µÔ∏è${text}\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nüìä –°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –∫–∞–∑–∞—Ä–º –≤ —á–∞—Å: ${total_earn.toFixed(2)}‚öîÔ∏è`, {
			parse_mode: "HTML",
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data == 'checkFollow') {
		let task = await Task.findOne({ id: message.chat.id });
		if (task) return bot.deleteMessage(message.chat.id, message.message_id);

		bot.getChatMember(-1001286701099, message.chat.id).then(async (res) => {
			if (res.status == 'left') return bot.answerCallbackQuery(query.id, 'üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!');

			message.user.trees.push({
				id: 1,
				date: Date.now(),
				lastCollect: Date.now()
			});

			await message.user.save();

			let $task = new Task({
				id: message.chat.id
			});

			await $task.save();

			return bot.editMessageText('–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ <b>–õ–∏–º–æ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ</b>.', {
				parse_mode: "HTML",
				chat_id: message.chat.id,
				message_id: message.message_id
			});
		});
	}

	if (query.data.startsWith('withdraw:')) {
		let id = Number(query.data.split('withdraw:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);
		bot.sendMessage("@bogatiry_viplatu", `‚öîÔ∏è <a href="tg://user?id=${ticket.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã–≤–µ–ª <b>${ticket.amount}‚ÇΩ</b>`, { parse_mode: "HTML" })
		qiwi.toWallet({ account: String(ticket.wallet), amount: ticket.amount, comment: '–í—ã–ø–ª–∞—Ç–∞ –æ—Ç @bogatiry_investbot' }, () => { });
		bot.sendMessage(ticket.id, `–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–∞ QIWI –∑–∞—á–∏—Å–ª–µ–Ω–æ ${ticket.amount}‚ÇΩ`);
		await User.findOneAndUpdate({ id: 0 }, { $inc: { fc: ticket.amount } })
		await User.findOneAndUpdate({ id: id }, { $inc: { payout: ticket.amount } })
		await ticket.remove();
		bot.editMessageText('–í—ã–ø–ª–∞—Ç–∏–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('back:')) {
		let id = Number(query.data.split('back:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		let user = await User.findOne({ id: ticket.id });
		bot.sendMessage(ticket.id, `–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${ticket.amount}‚ÇΩ`);

		await user.inc('buybalance', ticket.amount);
		await ticket.remove();

		return bot.editMessageText('–í–µ—Ä–Ω—É–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('take:')) {
		let id = Number(query.data.split('take:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		await ticket.remove();
		return bot.editMessageText('–ó–∞–±—Ä–∞–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}
	var d = query.data

	if (ADMINS.indexOf(query.from.id) !== -1) {
		if (d == "admin_mm") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:</i>\n# –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ # http://t.me/link #', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7770
		} else if (d == "admin_w") {
			bot.deleteMessage(message.chat.id, message.message_id);
			let tickets = await Ticket.find();
			if (tickets.length == 0) return bot.sendMessage(uid, '–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç');
			await tickets.map((x) => {
				bot.sendMessage(uid, `üìù –ò–≥—Ä–æ–∫: <a href="tg://user?id=${x.id}">–ò–≥—Ä–æ–∫</a> (ID: <code>${x.id}</code>)\n
	üí∞ –°—É–º–º–∞: <code>${x.amount}</code>‚ÇΩ
	ü•ù –ö–æ—à–µ–ª—ë–∫: <code>${x.wallet}</code>`, {
					parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: 'üì≠ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É', callback_data: `withdraw:${x.id}` }], [{ text: '‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å', callback_data: `back:${x.id}` }], [{ text: 'üö´ –ó–∞–±—Ä–∞—Ç—å', callback_data: `take:${x.id}` }]] }
				});
			});
		}
		else if (d.startsWith("admin_bm")) {
			bot.deleteMessage(message.chat.id, message.message_id);
			var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
			if (d.split("_")[2] == "false") bm.status = false
			if (d.split("_")[2] == "true") bm.status = true
			await User.updateOne({ id: 1, menu: JSON.stringify(bm) })
			console.log(bm)
			bot.sendMessage(uid, `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Ç—É—à–∏:\n
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${bm.price} WAVES
–°—Ç–∞—Ç—É—Å: ${bm.status ? "‚úÖ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏" : "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"}
–î–æ—Å—Ç—É–ø–Ω–æ: ${bm.count}
–ö—É–ø–ª–µ–Ω–æ: ${bm.bought}
`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: '–í—ã–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Ç—É—à—É', callback_data: `Admin_bm_new` }],
						[{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: `Admin_bm_price` }],
						[{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö', callback_data: `Admin_bm_count` }],
						[{ text: (bm.status ? '–°–¥–µ–ª–∞—Ç—å –Ω–µ–ø–æ—Å—Ç—É–ø–Ω–æ–π' : "–°–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–π"), callback_data: (bm.status ? 'admin_bm_false' : "admin_bm_true") }],
						[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],
					]
				}, parse_mode: "HTML"
			})
		}
		else if (d == "admin_top") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var u = await User.find({ ref: { $ne: 0 }, _id: { $gt: mongo.Types.ObjectId.createFromTime(Date.now() / 1000 - 24 * 60 * 60) } })
			console.log(u)
			var top = []
			u.map((e) => {
				var t = top.filter(u => { if (e.ref == u.id) return true; else return false })
				if (t.length == 0) top.push({ id: e.ref, ref: 1 })
				else {
					top = top.filter(u => { if (e.ref == u.id) return false; else return true })
					top.push({ id: e.ref, ref: t[0].ref + 1 })
				}
			})
			top = top.sort((a, b) => { if (a.ref <= b.ref) return 1; else return -1 })
			top.length = 20
			var str = `<b>üïí –¢–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∑–∞ 24 —á–∞—Å–∞:</b>\n\n`
			for (const i in top) {
				var us = await User.findOne({ id: top[i].id })
				str += `<b>${Number(i) + 1})</b> <a href="tg://user?id=${us.id}">${us.name ? us.name : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${top[i].ref}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`
			}
			bot.sendMessage(uid, str, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }]] }, parse_mode: "HTML" })
		}
		else if (d == "Admin_bm_new") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Ç—É—à –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (—á–∏—Å–ª–æ –∫—É–ø–∏–≤—à–∏—Ö –æ–±–Ω—É–ª–∏—Ç—Å—è, –∏ —Ä–∞—Ç—É—à–∏ —Å—Ç–∞–Ω—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–ø–∞–¥—É—Ç —Å –ø–æ–∫—É–ø–∫–∏, –∫–æ–≥–¥–∞ —á–∏—Å–ª–æ –∫—É–ø–∏–≤—à–∏—Ö –ø—Ä–∏–≤—ã—Å–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ):', { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] }, parse_mode: "HTML" })
			state[uid] = 77771
		}
		else if (d == "Admin_bm_price") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Ç—É—à–∏ –≤ WAVES —Ç–æ–∫–µ–Ω–∞—Ö:', { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] }, parse_mode: "HTML" })
			state[uid] = 77772
		}
		else if (d == "Admin_bm_count") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Ç—É—à:', { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_bm" }]] }, parse_mode: "HTML" })
			state[uid] = 77773
		}
		else if (d == "admin_b") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ % –¥–ª—è –±–æ–Ω—É—Å–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –∏–ª–∏ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7771
		}
		else if (d == "admin_u") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7772
		}
		else if (d.split("_")[0] == "addBuyBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7773
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7774
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addBHIVEBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è WAVES –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77745
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "addPayIns") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777455
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editBuyBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7775
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7776
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editBHIVEBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π WAVES –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77765
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editPayIns") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 777655
			data[uid] = d.split("_")[1]
		}
		else if (d == "admin_mm_stop") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			mm_status = false;
			bot.editMessageText("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", { chat_id: mm_achatid, message_id: mm_amsgid })
			mm_u = []
		}
		else if (d == "admin_mm_pause") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm2, parse_mode: html })
			mm_status = false;
		}
		else if (d == "admin_mm_play") {
			mm_status = true;
			bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n', { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1 })
		}
		else if (d.split("_")[0] == "ban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: true })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		else if (d.split("_")[0] == "unban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: false })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ä–∞–∑–±–∞–Ω–µ–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		else if (d == "admin_return") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			var b = (await User.findOne({ id: 0 })).deposit
			return qiwi.getBalance(async (err, balance) => {
				bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + "‚ÇΩ\n<b>–ë–æ–Ω—É—Å –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:</b> " + b + "%", { parse_mode: "HTML", reply_markup: RM_admin })
			})
		}
	}
});

var state = []


User.prototype.inc = function (field, value = 1) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function (field, value = 1) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function (field, value) {
	this[field] = value;
	return this.save();
}

function getNavigationIcon(id, tree_id) {
	if (id == tree_id) return 'üîµ';
	else {
		if (id == 1) return '1Ô∏è‚É£';
		if (id == 2) return '2Ô∏è‚É£';
		if (id == 3) return '3Ô∏è‚É£';
		if (id == 4) return '4Ô∏è‚É£';
		if (id == 5) return '5Ô∏è‚É£';
	}
}

function getNavigationQuery(id, tree_id) {
	if (id == tree_id) return 'none';
	else {
		if (id == 1) return 'trees:shop1';
		if (id == 2) return 'trees:shop2';
		if (id == 3) return 'trees:shop3';
		if (id == 4) return 'trees:shop4';
		if (id == 5) return 'trees:shop5';
	}
}

function getInventoryIcon(id, tree_id) {
	if (id == tree_id) return 'üî¥';
	else {
		if (id == 1) return '1Ô∏è‚É£';
		if (id == 2) return '2Ô∏è‚É£';
		if (id == 3) return '3Ô∏è‚É£';
		if (id == 4) return '4Ô∏è‚É£';
		if (id == 5) return '5Ô∏è‚É£';
	}
}

function getInventoryQuery(id, tree_id) {
	if (id == tree_id) return 'none';
	else {
		if (id == 1) return 'trees:inv1';
		if (id == 2) return 'trees:inv2';
		if (id == 3) return 'trees:inv3';
		if (id == 4) return 'trees:inv4';
		if (id == 5) return 'trees:inv5';
	}
}

setInterval(async () => {
	qiwi.getOperationHistory({ rows: 10, operation: 'IN' }, (err, response) => {
		response.data.map(async (x) => {
			if (!x.comment) return;
			if (!x.comment.startsWith('B')) return;
			if (txnId.indexOf(x.txnId) !== -1) return;
			let id = Number(x.comment.split("B")[1]);
			if (!id) return;
			let user = await User.findOne({ id });
			if (!user) return;
			if (x.sum.currency != 643) return;
			var b = (await User.findOne({ id: 0 })).deposit
			if (b == 0) {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 100 && !user.not) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @romkej`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })

				}
				await user.inc('buybalance', x.sum.amount);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ`);
				bot.sendMessage("@bogatiry_viplatu", `‚öîÔ∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ`, { parse_mode: "HTML" }))
			} else {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 100 && !user.not) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 100‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @romkej`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })

				}
				b = b / 100
				await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
				bot.sendMessage("@bogatiry_viplatu", `‚öîÔ∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

			}
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { buybalance: roundPlus(x.sum.amount * 0.05) } })
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { outbalance: roundPlus(x.sum.amount * 0.05) } })

			bot.sendMessage(user.ref, `ü§ù –í–∞—à <a href="tg://user?id=${id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>!\nüí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ <b>${roundPlus(x.sum.amount * 0.05)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "HTML" }).catch()

			txnId.push(x.txnId)
			require('fs').writeFileSync('./txnId.json', JSON.stringify(txnId));
		});
	});
}, 10000);

async function mmTick() {
	if (mm_status) {
		try {
			mm_i++
			if (mm_type == "text") {
				if (mm_btn_status)
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] }, parse_mode: html }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { parse_mode: html }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			else if (mm_type == "img") {
				if (mm_btn_status)
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text, reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] } }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			if (mm_i % 10 == 0) {
				var tek = Math.round((mm_i / mm_total) * 40)
				var str = ""
				for (var i = 0; i < tek; i++) str += "+"
				str += '>'
				for (var i = tek + 1; i < 41; i++) str += "-"
				bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1, parse_mode: html })
			}
			if (mm_i == mm_total) {
				mm_status = false;
				bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total, { chat_id: mm_achatid, message_id: mm_amsgid })
				sendAdmins('<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–£—Å–ø–µ—à–Ω–æ:</b> ' + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω–æ:</b> " + mm_err, { parse_mode: html })
				mm_u = []
			}
		} finally { }
	}
}

setInterval(mmTick, 100);

var mm_total
var mm_i
var mm_status = false
var mm_amsgid
var mm_type
var mm_imgid
var mm_text
var mm_achatid
var mm_btn_status
var mm_btn_text
var mm_btn_link
var mm_ok
var mm_err

async function mm_t(text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	console.log(ut)
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}
	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "text"
	mm_text = text
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

bot.on('photo', async msg => {
	if (msg.from != undefined) {
		var uid = msg.from.id
		if (state[uid] == 7770 && ADMINS.indexOf(uid) !== -1) {
			state[uid] = undefined
			var text = ""
			if (msg.caption != undefined) text = msg.caption
			bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
				if (text.split("#").length == 4) {
					var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					text = text.split("#")[0].replace(/(^\s*)|(\s*)$/g, '').replace(' ', '')
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)

				}
				else
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, false, false, false, 100)

			})
		}
	}
})



async function mm_img(img, text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}

	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "img"
	mm_text = text
	mm_imgid = img
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

const html = "HTML"

function sendAdmins(text, params) { for (var i = 0; i < ADMINS.length; i++) bot.sendMessage(ADMINS[i], text, params) }

var data = []


function roundPlus(number) { if (isNaN(number)) return false; var m = Math.pow(10, 2); return Math.round(number * m) / m; }

async function main() {
	var u = (await User.find({}, { id: 1 })).map((e) => { return e.id })
	for (var i in u) {
		await User.findOneAndUpdate({ id: u[i] }, { refCount: await User.countDocuments({ ref: u[i] }) })
		console.log(i)
	}

}
//main()

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—á–µ–ª–æ–º–∞—Ç–∫–∏ —Å –≤—ã–¥–∞—á–µ–π –ø—á—ë–ª
async function beeMotherUpdater() {
	// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—á—ë–ª
	var bm = await BeeMother.find({ end_time: { $lte: Date.now() } })
	for (var i in bm) {
		var b = bm[i]
		await BeeMother.deleteOne({ _id: String(b._id) })
		bot.sendMessage(b.creator_id, `‚öúÔ∏è –í–∞—à–∞ —Ä–∞—Ç—É—à–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ 4 —á–µ–º–ø–∏–æ–Ω–∞ –∏ –∏—Å—á–µ–∑–ª–∞`)
	}
	// –í—ã–¥–∞—á–∞ –¥–∏–∫–∏—Ö –ø—á—ë–ª
	bm = await BeeMother.find({ beesGet: { $lte: 4 }, nextBeeGet: { $lte: Date.now() } })
	console.log(bm)
	for (var i in bm) {
		var b = bm[i]
		await BeeMother.findOneAndUpdate({ _id: String(b._id) }, { nextBeeGet: b.nextBeeGet + 1000 * 60 * 60 * 24 * 7, beesGet: b.beesGet + 1 })
		await WildBee.insertMany([{ creator_id: b.creator_id, start_time: Date.now(), level: 1, bee_profit: 0 }])
		bot.sendMessage(b.creator_id, `üê≤ –†–∞—Ç—É—à–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ –í–∞–º —á–µ–º–ø–∏–æ–Ω–∞!`)
	}
}
setInterval(beeMotherUpdater, 1000 * 60 * 60)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–∞—á–∏ –º—ë–¥–∞ –¥–∏–∫–∏–º–∏ –ø—á—ë–ª–∞–º–∏
async function wildBeesUpdater() {
	if (new Date().getMinutes() == 0) {
		var wb = await WildBee.find()
		for (var i in wb) {
			var b = wb[i]
			await User.findOneAndUpdate({ id: b.creator_id }, { $inc: { wb_profits: wbProfits[b.level] } })
			await WildBee.findOneAndUpdate({ _id: String(b._id) }, { $inc: { bee_profit: wbProfits[b.level] } })
		}
	}
}
setInterval(wildBeesUpdater, 1000 * 60)

//User.updateMany({}, {payout: 0, not: false}).then()
